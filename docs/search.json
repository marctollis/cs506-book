[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS506: Data Wrangling and Management",
    "section": "",
    "text": "Preface\nWelcome to CS506: Data Wrangling and Management. This course introduces graduate students to data wrangling and management using R and the Tidyverse ecosystem. Students will learn to import, manipulate, clean, and visualize data with a strong emphasis on practical applications and reproducible workflows. The course will utilize the free textbook R for Data Science by Hadley Wickham and Garrett Grolemund.\nCourse Objectives: Upon successful completion of the course, students will be able to:\nTextbook: R for Data Science by Hadley Wickham & Garrett Grolemund (Available for free: https://r4ds.hadley.nz/)\nSoftware Requirements:",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "CS506: Data Wrangling and Management",
    "section": "Footnotes",
    "text": "Footnotes\n\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books.\nThis website is published using Github Pages.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "welcome.html",
    "href": "welcome.html",
    "title": "1  Software",
    "section": "",
    "text": "You will need to have all of the following free software downloaded and in working order on your laptop.\n\n\n\n\n\n\nPrior to first lecture\n\n\n\nYou must have the following on your laptops prior to the first lecture.\n\n\n\nCompatible version of R software environment\nLatest version of RStudio Desktop IDE\nQuarto publishing system (for documents with integrated code).\nYou must have a functional PDF Engine to render Quarto (.qmd) documents into PDF. See this section on PDF Engines, and be sure to test whether you can render an example .qmd file into a PDF.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Software</span>"
    ]
  },
  {
    "objectID": "Rintro.html",
    "href": "Rintro.html",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "",
    "text": "2.1 Learning Objectives\nBy the end of this week, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "Rintro.html#learning-objectives",
    "href": "Rintro.html#learning-objectives",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "",
    "text": "Install and open R, RStudio, and Quarto\nNavigate the four-pane layout of RStudio\nCreate and run R scripts\nUnderstand the differences between the console, script editor, and environment\nExecute basic R operations and understand data types\nInstall and load R packages\nCreate and render a Quarto (.qmd) document to .pdf",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "Rintro.html#getting-started",
    "href": "Rintro.html#getting-started",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "\n2.2 Getting Started",
    "text": "2.2 Getting Started\nR is a programming language designed for data analysis.\nRStudio is an Integrated Development Environment (IDE) that makes working with R easier.\nQuarto is a tool for creating reproducible documents that combine code and text.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "Rintro.html#installing-r-rstudio-and-quarto",
    "href": "Rintro.html#installing-r-rstudio-and-quarto",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "\n2.3 Installing R, RStudio, and Quarto",
    "text": "2.3 Installing R, RStudio, and Quarto\n\nInstall R: https://cran.r-project.org/\n\nInstall RStudio: https://posit.co/download/rstudio-desktop/\n\nInstall Quarto: https://quarto.org/docs/get-started/\n\n\nWhen you open RStudio, you’ll see four panes:\n\nConsole – runs code interactively\nSource – write and save scripts or Quarto documents\nEnvironment/History – view and manage objects\nFiles/Plots/Packages/Help/Viewer – navigation and visualization tools",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "Rintro.html#introduction-to-quarto",
    "href": "Rintro.html#introduction-to-quarto",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "\n2.4 Introduction to Quarto",
    "text": "2.4 Introduction to Quarto\nQuarto allows you to create documents that include both text and executable R code.\n\n2.4.1 Your First Quarto Document\n\nIn RStudio: File → New File → Quarto Document\nReplace the header with:\n\n---\ntitle: \"My First Quarto Document\"\nauthor: \"Your Name\"\nformat: pdf\n---\n\nBelow the header, add:\n\n\nx &lt;- c(1, 2, 3, 4, 5)\nmean(x)\n\n[1] 3\n\n\n\nClick Render to produce a PDF file.\n\n\n2.4.2 In-Class Quarto Exercise\n\nCreate a new Quarto document with:\n\nA title, your name, and the date\nA short paragraph of text\nA code chunk that calculates the mean and standard deviation of a numeric vector\n\n\nRender it to PDF and verify it works.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "Rintro.html#basic-r-concepts",
    "href": "Rintro.html#basic-r-concepts",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "\n2.5 Basic R Concepts",
    "text": "2.5 Basic R Concepts\n\n2.5.1 Variables and Assignments\n\nx &lt;- 5\ny &lt;- 10\nz &lt;- x + y\nz\n\n[1] 15\n\n\n\n2.5.2 Vectors and Functions\n\nages &lt;- c(25, 30, 35, 40)\nmean(ages)\n\n[1] 32.5\n\nsd(ages)\n\n[1] 6.454972\n\n\n\n2.5.3 Data Frames\n\nname &lt;- c(\"Alice\", \"Bob\", \"Charlie\")\nage &lt;- c(25, 30, 35)\nstudent_data &lt;- data.frame(name, age)\nstudent_data\n\n     name age\n1   Alice  25\n2     Bob  30\n3 Charlie  35\n\n\n\n2.5.4 Inspecting Data\n\nstr(student_data)\n\n'data.frame':   3 obs. of  2 variables:\n $ name: chr  \"Alice\" \"Bob\" \"Charlie\"\n $ age : num  25 30 35\n\nsummary(student_data)\n\n     name                age      \n Length:3           Min.   :25.0  \n Class :character   1st Qu.:27.5  \n Mode  :character   Median :30.0  \n                    Mean   :30.0  \n                    3rd Qu.:32.5  \n                    Max.   :35.0  \n\nhead(student_data)\n\n     name age\n1   Alice  25\n2     Bob  30\n3 Charlie  35\n\n\n\n2.5.5 Comments and Help\n\n# This is a comment\n?mean  # Help for the mean function\n\n\n2.5.6 Using Scripts and Console\n\nWrite your code in the script editor and run lines with Ctrl+Enter (Cmd+Enter on Mac)\nSave scripts with the .R extension\nUse the Console for quick exploration\n\n\n2.5.7 Installing and Loading Packages\n\ninstall.packages(\"tidyverse\")\n\n\n2.5.8 In-Class R Exercises\n\nCreate a numeric vector of five numbers and calculate its mean, median, and standard deviation.\nCreate a data frame with three columns (name, age, and major) and print its structure.\nImport a dataset from a URL using read.csv() and summarize it using summary().\n\n\nmy_vec &lt;- c(10, 20, 30, 40, 50)\nmean(my_vec)\n\n[1] 30\n\nmedian(my_vec)\n\n[1] 30\n\nsd(my_vec)\n\n[1] 15.81139\n\ndf &lt;- data.frame(\n  name = c(\"Lily\", \"Mark\", \"Tom\"),\n  age = c(21, 22, 23),\n  major = c(\"Biology\", \"Math\", \"History\")\n)\nstr(df)\n\n'data.frame':   3 obs. of  3 variables:\n $ name : chr  \"Lily\" \"Mark\" \"Tom\"\n $ age  : num  21 22 23\n $ major: chr  \"Biology\" \"Math\" \"History\"\n\ndata &lt;- read.csv(\"https://people.sc.fsu.edu/~jburkardt/data/csv/airtravel.csv\")\nsummary(data)\n\n    Month               X1958           X1959           X1960      \n Length:12          Min.   :310.0   Min.   :342.0   Min.   :390.0  \n Class :character   1st Qu.:339.2   1st Qu.:387.5   1st Qu.:418.5  \n Mode  :character   Median :360.5   Median :406.5   Median :461.0  \n                    Mean   :381.0   Mean   :428.3   Mean   :476.2  \n                    3rd Qu.:411.8   3rd Qu.:465.2   3rd Qu.:514.8  \n                    Max.   :505.0   Max.   :559.0   Max.   :622.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "",
    "text": "3.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#learning-objectives",
    "href": "ggplot2.html#learning-objectives",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "",
    "text": "Create basic scatterplots using ggplot2\n\nMap variables to aesthetics (color, size, shape)\nUse different geoms (points, smooth lines, histograms)\nCreate facets to display subsets of data\nCustomize plots for clear communication",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#introduction-to-data-visualization",
    "href": "ggplot2.html#introduction-to-data-visualization",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.2 Introduction to Data Visualization",
    "text": "3.2 Introduction to Data Visualization\nThis week we begin with visualization first, following R for Data Science (Ch. 2).ggplot2 is part of the tidyverse and implements the grammar of graphics.\nWe will use the built-in mpg dataset for examples.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#ggplot2-basics",
    "href": "ggplot2.html#ggplot2-basics",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.3 ggplot2 Basics",
    "text": "3.3 ggplot2 Basics\nThe template for a ggplot is:\nggplot(data = &lt;DATA&gt;) +\n  &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;))\n\n3.3.1 Example: Scatterplot of engine size vs. highway mpg\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy))\n\n\n\n\n\n\n\n\n3.3.2 In-Class Exercise 1\n\nCreate a scatterplot of cty (city mpg) vs. hwy (highway mpg).\n\nWhat relationship do you see?\n\nTry swapping x and y—does it change the interpretation?\n\n\n3.3.3 Aesthetic Mappings\nYou can map variables to visual properties: color, size, shape, alpha.\n\n3.3.4 Example: Color by class\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy, color = class))\n\n\n\n\n\n\n\n\n3.3.5 In-Class Exercise 2\n\nModify the plot to map size to cyl (number of cylinders).\n\nMap shape to drv (drive type).\n\nTry using both color and shape in one plot.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#adding-geoms",
    "href": "ggplot2.html#adding-geoms",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.4 Adding Geoms",
    "text": "3.4 Adding Geoms\nThe geom_point() function creates a scatterplot, but there are many geoms.\n\n3.4.1 Example: Add a smoothing line\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n3.4.2 In-Class Exercise 3\n\nAdd a geom_smooth() line to your plot from Exercise 1.\n\nTry setting se = FALSE to remove the confidence band.\n\nChange the color of the line manually.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#facets",
    "href": "ggplot2.html#facets",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.5 Facets",
    "text": "3.5 Facets\nFacets split the data into subplots based on a variable.\n\n3.5.1 Example: Facet by drive type\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_wrap(~ drv)\n\n\n\n\n\n\n\n\n3.5.2 In-Class Exercise 4\n\nUse facet_wrap() to facet the plot by class.\n\nTry facet_grid(drv ~ cyl)—what do you observe?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#customizing-plots",
    "href": "ggplot2.html#customizing-plots",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.6 Customizing Plots",
    "text": "3.6 Customizing Plots\nYou can add labels, titles, and themes to improve clarity.\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  labs(\n    title = \"Fuel Efficiency by Engine Size\",\n    x = \"Engine Displacement (L)\",\n    y = \"Highway MPG\",\n    color = \"Car Class\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#in-class-challenge",
    "href": "ggplot2.html#in-class-challenge",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.7 In-Class Challenge",
    "text": "3.7 In-Class Challenge\nUsing the mpg dataset:\n\nMake a scatterplot of displ vs hwy.\n\nMap a third variable to color.\n\nAdd a smooth line and facet by drive type.\n\nAdd labels and use a clean theme.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#homework-preview",
    "href": "ggplot2.html#homework-preview",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.8 Homework Preview",
    "text": "3.8 Homework Preview\nFor Homework 1 (Visualization), you will:\n\nUse the mpg dataset (or another dataset of your choice).\n\nCreate three plots:\n\nA scatterplot with at least one aesthetic mapping\nA faceted plot showing subsets of data\nA customized plot with titles, labels, and a theme\n\n\nRender your .qmd to PDF and submit on Canvas.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#next-steps",
    "href": "ggplot2.html#next-steps",
    "title": "\n3  Data Visualization with ggplot2\n",
    "section": "\n3.9 Next Steps",
    "text": "3.9 Next Steps\nNext week, we begin data transformation using dplyr to manipulate data before plotting.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization with ggplot2</span>"
    ]
  },
  {
    "objectID": "dplyr1.html",
    "href": "dplyr1.html",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "",
    "text": "4.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#learning-objectives",
    "href": "dplyr1.html#learning-objectives",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "",
    "text": "Filter rows using filter()\n\nSort rows using arrange()\n\nSelect columns using select()\n\nCreate or modify columns using mutate()\n\nCombine multiple transformations using the base R pipe |&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#in-class-exercise-1-rows",
    "href": "dplyr1.html#in-class-exercise-1-rows",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n6.1 In-Class Exercise 1 – Rows",
    "text": "6.1 In-Class Exercise 1 – Rows\nUsing the flights dataset:\n\nFilter for flights departing from JFK in July.\n\nArrange by arrival delay (largest to smallest).\n\nIdentify the flight with the worst delay.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#in-class-exercise-2-columns",
    "href": "dplyr1.html#in-class-exercise-2-columns",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n7.1 In-Class Exercise 2 – Columns",
    "text": "7.1 In-Class Exercise 2 – Columns\n\nSelect carrier, flight, dep_delay, and arr_delay.\n\nCreate a column gain = arr_delay - dep_delay.\n\nDisplay the first 10 rows.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#in-class-exercise-3-pipes",
    "href": "dplyr1.html#in-class-exercise-3-pipes",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n8.1 In-Class Exercise 3 – Pipes",
    "text": "8.1 In-Class Exercise 3 – Pipes\nChain these steps using |&gt;:\n\nFilter flights from JFK in June.\n\nSelect carrier, flight, dep_delay, arr_delay.\n\nCreate a column gain.\n\nArrange by largest gain and show the top 5.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html",
    "href": "dplyr2.html",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "",
    "text": "5.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#learning-objectives",
    "href": "dplyr2.html#learning-objectives",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "",
    "text": "Group data with group_by()\n\nCompute summary statistics with summarize()\n\nUse multiple summaries with grouped data\nCombine multiple datasets using join functions\nPractice chaining multiple verbs with the pipe |&gt;",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#in-class-exercise-1-grouped-summaries",
    "href": "dplyr2.html#in-class-exercise-1-grouped-summaries",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n6.1 In-Class Exercise 1 – Grouped Summaries",
    "text": "6.1 In-Class Exercise 1 – Grouped Summaries\nUsing flights:\n\nGroup by origin and calculate the average departure delay.\n\nGroup by carrier and find the number of flights and average arrival delay.\n\nWhich carrier has the highest average arrival delay?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#in-class-exercise-2-multiple-grouping",
    "href": "dplyr2.html#in-class-exercise-2-multiple-grouping",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n7.1 In-Class Exercise 2 – Multiple Grouping",
    "text": "7.1 In-Class Exercise 2 – Multiple Grouping\n\nGroup by origin and carrier.\n\nSummarize with the average air_time.\n\nArrange results to see which origin-carrier combination has the longest average flights.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#in-class-exercise-3-joins",
    "href": "dplyr2.html#in-class-exercise-3-joins",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n8.1 In-Class Exercise 3 – Joins",
    "text": "8.1 In-Class Exercise 3 – Joins\n\nUse left_join() to add airline names to the flights dataset.\n\nUse count() to find how many flights each airline operates.\n\nArrange results by the number of flights.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#in-class-challenge",
    "href": "dplyr2.html#in-class-challenge",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.7 In-Class Challenge",
    "text": "5.7 In-Class Challenge\nUsing the flights dataset:\n\nJoin airline names\n\nGroup by airline name\n\nSummarize number of flights, average departure delay, and average arrival delay\n\nArrange by average arrival delay\n\nIdentify the airline with the longest delays",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "",
    "text": "6.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#learning-objectives",
    "href": "eda.html#learning-objectives",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "",
    "text": "Understand the purpose of exploratory data analysis (EDA)\nVisualize distributions of single variables\nExamine relationships between variables\nDetect patterns, clusters, and outliers\nUse transformations to clarify patterns",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#categorical-variables",
    "href": "eda.html#categorical-variables",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n8.1 Categorical Variables",
    "text": "8.1 Categorical Variables\nUse a bar chart (geom_bar()):\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#continuous-variables",
    "href": "eda.html#continuous-variables",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n8.2 Continuous Variables",
    "text": "8.2 Continuous Variables\nUse a histogram (geom_histogram()):\n\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), binwidth = 0.5)\n\n\n\n\n\n\n\nYou can also use geom_freqpoly() for density curves.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#in-class-exercise-1-single-variables",
    "href": "eda.html#in-class-exercise-1-single-variables",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n8.3 In-Class Exercise 1 – Single Variables",
    "text": "8.3 In-Class Exercise 1 – Single Variables\n\nPlot the distribution of color using a bar chart.\n\nPlot a histogram of price with a binwidth of 1000.\n\nWhat patterns or anomalies do you see?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#two-continuous-variables",
    "href": "eda.html#two-continuous-variables",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n9.1 Two Continuous Variables",
    "text": "9.1 Two Continuous Variables\nScatterplots show relationships:\n\nggplot(data = diamonds) +\n  geom_point(mapping = aes(x = carat, y = price), alpha = 0.3)\n\n\n\n\n\n\n\nUse alpha to reduce overplotting.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#categorical-vs.-continuous",
    "href": "eda.html#categorical-vs.-continuous",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n9.2 Categorical vs. Continuous",
    "text": "9.2 Categorical vs. Continuous\nBoxplots work well:\n\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#in-class-exercise-2-relationships",
    "href": "eda.html#in-class-exercise-2-relationships",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n9.3 In-Class Exercise 2 – Relationships",
    "text": "9.3 In-Class Exercise 2 – Relationships\n\nCreate a scatterplot of carat vs price.\n\nColor the points by cut.\n\nMake a boxplot of price across diamond color categories.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#in-class-exercise-3-patterns-and-transformations",
    "href": "eda.html#in-class-exercise-3-patterns-and-transformations",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n11.1 In-Class Exercise 3 – Patterns and Transformations",
    "text": "11.1 In-Class Exercise 3 – Patterns and Transformations\n\nIdentify any outliers in the diamonds dataset using filters.\n\nApply a log transformation to price.\n\nDoes the relationship between carat and price become clearer?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "eda.html#in-class-challenge-eda-workflow",
    "href": "eda.html#in-class-challenge-eda-workflow",
    "title": "\n6  Exploratory Data Analysis (EDA)\n",
    "section": "\n12.1 In-Class Challenge – EDA Workflow",
    "text": "12.1 In-Class Challenge – EDA Workflow\n\nExplore diamonds by:\n\nVisualizing distributions of at least two variables\nPlotting relationships between two variables\nDetecting outliers\nApplying a transformation to clarify a pattern",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "\n7  Tidy Data with tidyr\n",
    "section": "",
    "text": "7.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tidy Data with tidyr</span>"
    ]
  },
  {
    "objectID": "tidy.html#learning-objectives",
    "href": "tidy.html#learning-objectives",
    "title": "\n7  Tidy Data with tidyr\n",
    "section": "",
    "text": "Explain why tidy data improves analysis and visualization\nReshape data between wide and long formats using pivot_longer() and pivot_wider()\n\nSeparate and unite columns using separate() and unite()\n\nApply tidying techniques to messy real-world datasets\nPrepare datasets for use with dplyr and ggplot2",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tidy Data with tidyr</span>"
    ]
  },
  {
    "objectID": "tidy.html#in-class-exercise-1-pivoting",
    "href": "tidy.html#in-class-exercise-1-pivoting",
    "title": "\n7  Tidy Data with tidyr\n",
    "section": "\n9.1 In-Class Exercise 1 – Pivoting",
    "text": "9.1 In-Class Exercise 1 – Pivoting\n\nUse pivot_longer() to convert table4a to long format.\n\nUse pivot_wider() on table2 to create separate columns for type.\n\nWhich format is easier to use with ggplot2 and dplyr?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tidy Data with tidyr</span>"
    ]
  },
  {
    "objectID": "tidy.html#in-class-exercise-2-separate-and-unite",
    "href": "tidy.html#in-class-exercise-2-separate-and-unite",
    "title": "\n7  Tidy Data with tidyr\n",
    "section": "\n10.1 In-Class Exercise 2 – Separate and Unite",
    "text": "10.1 In-Class Exercise 2 – Separate and Unite\n\nUse separate() to split the rate column in table3.\n\nUse unite() to combine century and year into one column.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tidy Data with tidyr</span>"
    ]
  },
  {
    "objectID": "tidy.html#in-class-exercise-3-who-dataset",
    "href": "tidy.html#in-class-exercise-3-who-dataset",
    "title": "\n7  Tidy Data with tidyr\n",
    "section": "\n11.1 In-Class Exercise 3 – WHO Dataset",
    "text": "11.1 In-Class Exercise 3 – WHO Dataset\n\nPivot who longer to create key and cases.\n\nSeparate key into multiple components.\n\nCount total cases by country.\n\nWhich country has the highest reported cases?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tidy Data with tidyr</span>"
    ]
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "\n8  Workflow and Reproducibility\n",
    "section": "",
    "text": "8.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Workflow and Reproducibility</span>"
    ]
  },
  {
    "objectID": "workflow.html#learning-objectives",
    "href": "workflow.html#learning-objectives",
    "title": "\n8  Workflow and Reproducibility\n",
    "section": "",
    "text": "Organize your work with R projects\nUse Quarto for reproducible documents\nFollow best practices for naming files and structuring directories\nIncorporate code, text, and output into a single reproducible report\nUse version control with GitHub (optional, for advanced students)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Workflow and Reproducibility</span>"
    ]
  },
  {
    "objectID": "workflow.html#in-class-exercise-1-project-setup",
    "href": "workflow.html#in-class-exercise-1-project-setup",
    "title": "\n8  Workflow and Reproducibility\n",
    "section": "\n10.1 In-Class Exercise 1 – Project Setup",
    "text": "10.1 In-Class Exercise 1 – Project Setup\n\nCreate a new RStudio Project for this course.\n\nMake folders: data, scripts, outputs.\n\nSave your .qmd homework file in the project root.\n\nRender your Quarto document and confirm outputs stay organized.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Workflow and Reproducibility</span>"
    ]
  },
  {
    "objectID": "workflow.html#in-class-exercise-2-quarto-report",
    "href": "workflow.html#in-class-exercise-2-quarto-report",
    "title": "\n8  Workflow and Reproducibility\n",
    "section": "\n11.1 In-Class Exercise 2 – Quarto Report",
    "text": "11.1 In-Class Exercise 2 – Quarto Report\n\nCreate a .qmd file that loads a dataset and runs a simple analysis.\n\nAdd at least one plot and one table.\n\nRender to PDF and check the output.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Workflow and Reproducibility</span>"
    ]
  },
  {
    "objectID": "workflow.html#in-class-challenge-reproducible-mini-report",
    "href": "workflow.html#in-class-challenge-reproducible-mini-report",
    "title": "\n8  Workflow and Reproducibility\n",
    "section": "\n13.1 In-Class Challenge – Reproducible Mini-Report",
    "text": "13.1 In-Class Challenge – Reproducible Mini-Report\n\nSet up a project with an organized folder structure\nCreate a Quarto document that:\n\nReads a dataset\nRuns a simple transformation\nCreates a plot\nSummarizes the results in text\n\n\nRender to PDF and check for a clean, reproducible output",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Workflow and Reproducibility</span>"
    ]
  },
  {
    "objectID": "dataimport.html",
    "href": "dataimport.html",
    "title": "\n9  Data Import with readr and readxl\n",
    "section": "",
    "text": "9.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Import with readr and readxl</span>"
    ]
  },
  {
    "objectID": "dataimport.html#learning-objectives",
    "href": "dataimport.html#learning-objectives",
    "title": "\n9  Data Import with readr and readxl\n",
    "section": "",
    "text": "Import CSV and TSV files with readr\n\nRead Excel files with readxl\n\nUnderstand how column types are parsed\nParse dates, times, and numbers correctly\nDiagnose and fix import problems",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Import with readr and readxl</span>"
    ]
  },
  {
    "objectID": "dataimport.html#in-class-exercise-1-csvtsv",
    "href": "dataimport.html#in-class-exercise-1-csvtsv",
    "title": "\n9  Data Import with readr and readxl\n",
    "section": "\n10.1 In-Class Exercise 1 – CSV/TSV",
    "text": "10.1 In-Class Exercise 1 – CSV/TSV\n\nDownload a small CSV file (e.g., from the course repository).\n\nRead it into R using read_csv().\n\nInspect its structure with glimpse() and summary().\n\nWhat data types were automatically detected?",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Import with readr and readxl</span>"
    ]
  },
  {
    "objectID": "dataimport.html#in-class-exercise-2-parsing",
    "href": "dataimport.html#in-class-exercise-2-parsing",
    "title": "\n9  Data Import with readr and readxl\n",
    "section": "\n11.1 In-Class Exercise 2 – Parsing",
    "text": "11.1 In-Class Exercise 2 – Parsing\n\nCreate a vector of messy numbers: c(\"$100\", \"250%\", \"300\").\n\nUse parse_number() to extract numeric values.\n\nCreate a vector of dates as strings and use parse_date().",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Import with readr and readxl</span>"
    ]
  },
  {
    "objectID": "dataimport.html#in-class-exercise-3-excel-import",
    "href": "dataimport.html#in-class-exercise-3-excel-import",
    "title": "\n9  Data Import with readr and readxl\n",
    "section": "\n12.1 In-Class Exercise 3 – Excel Import",
    "text": "12.1 In-Class Exercise 3 – Excel Import\n\nUse a provided Excel file (or download one).\n\nRead the first sheet with read_excel().\n\nSpecify a different sheet and check the result.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Import with readr and readxl</span>"
    ]
  },
  {
    "objectID": "dataimport.html#in-class-challenge-import-clean-workflow",
    "href": "dataimport.html#in-class-challenge-import-clean-workflow",
    "title": "\n9  Data Import with readr and readxl\n",
    "section": "\n14.1 In-Class Challenge – Import & Clean Workflow",
    "text": "14.1 In-Class Challenge – Import & Clean Workflow\n\nImport a messy CSV file with mixed types.\n\nFix incorrect column parsing.\n\nConvert a date column to proper Date format.\n\nSummarize the data by a grouping variable.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Import with readr and readxl</span>"
    ]
  },
  {
    "objectID": "strings.html",
    "href": "strings.html",
    "title": "\n10  Strings and Regular Expressions with stringr\n",
    "section": "",
    "text": "10.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions with stringr</span>"
    ]
  },
  {
    "objectID": "strings.html#learning-objectives",
    "href": "strings.html#learning-objectives",
    "title": "\n10  Strings and Regular Expressions with stringr\n",
    "section": "",
    "text": "Manipulate strings using the stringr package\nDetect patterns with regular expressions (regex)\nExtract, replace, and split text\nClean messy text data for analysis",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions with stringr</span>"
    ]
  },
  {
    "objectID": "strings.html#in-class-exercise-1-basic-string-operations",
    "href": "strings.html#in-class-exercise-1-basic-string-operations",
    "title": "\n10  Strings and Regular Expressions with stringr\n",
    "section": "\n12.1 In-Class Exercise 1 – Basic String Operations",
    "text": "12.1 In-Class Exercise 1 – Basic String Operations\n\nCreate a vector of at least 5 words.\n\nMeasure their lengths with str_length().\n\nConcatenate them with the phrase \" is cool\".",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions with stringr</span>"
    ]
  },
  {
    "objectID": "strings.html#in-class-exercise-2-pattern-detection",
    "href": "strings.html#in-class-exercise-2-pattern-detection",
    "title": "\n10  Strings and Regular Expressions with stringr\n",
    "section": "\n13.1 In-Class Exercise 2 – Pattern Detection",
    "text": "13.1 In-Class Exercise 2 – Pattern Detection\n\nCreate a vector of email-like strings.\n\nUse str_detect() to check which contain \"@\".\n\nWrite a regex to detect strings ending in .com.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions with stringr</span>"
    ]
  },
  {
    "objectID": "strings.html#in-class-exercise-3-extraction-and-replacement",
    "href": "strings.html#in-class-exercise-3-extraction-and-replacement",
    "title": "\n10  Strings and Regular Expressions with stringr\n",
    "section": "\n14.1 In-Class Exercise 3 – Extraction and Replacement",
    "text": "14.1 In-Class Exercise 3 – Extraction and Replacement\n\nExtract digits from a vector of alphanumeric strings.\n\nReplace the word \"dog\" with \"puppy\" in a text vector.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions with stringr</span>"
    ]
  },
  {
    "objectID": "strings.html#in-class-challenge-text-cleaning",
    "href": "strings.html#in-class-challenge-text-cleaning",
    "title": "\n10  Strings and Regular Expressions with stringr\n",
    "section": "\n15.1 In-Class Challenge – Text Cleaning",
    "text": "15.1 In-Class Challenge – Text Cleaning\n\nCreate a vector of messy product names with extra spaces and symbols.\n\nUse str_replace_all() and str_trim() to clean them.\n\nExtract numeric prices from the strings.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions with stringr</span>"
    ]
  },
  {
    "objectID": "factors.html",
    "href": "factors.html",
    "title": "\n11  Factors and Categorical Data with forcats\n",
    "section": "",
    "text": "11.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors and Categorical Data with forcats</span>"
    ]
  },
  {
    "objectID": "factors.html#learning-objectives",
    "href": "factors.html#learning-objectives",
    "title": "\n11  Factors and Categorical Data with forcats\n",
    "section": "",
    "text": "Understand what factors are and why they are used\nReorder factor levels to improve plots\nRename factor levels\nCollapse multiple levels into broader categories\nUse forcats functions to manipulate categorical variables effectively",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors and Categorical Data with forcats</span>"
    ]
  },
  {
    "objectID": "factors.html#in-class-exercise-1-reordering",
    "href": "factors.html#in-class-exercise-1-reordering",
    "title": "\n11  Factors and Categorical Data with forcats\n",
    "section": "\n14.1 In-Class Exercise 1 – Reordering",
    "text": "14.1 In-Class Exercise 1 – Reordering\n\nUse fct_reorder() to reorder car classes in the mpg dataset by highway mpg.\n\nMake a boxplot of hwy by class.\n\nWhich class has the highest median mpg?",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors and Categorical Data with forcats</span>"
    ]
  },
  {
    "objectID": "factors.html#in-class-exercise-2-recoding",
    "href": "factors.html#in-class-exercise-2-recoding",
    "title": "\n11  Factors and Categorical Data with forcats\n",
    "section": "\n15.1 In-Class Exercise 2 – Recoding",
    "text": "15.1 In-Class Exercise 2 – Recoding\n\nRecode the drv variable to use descriptive names.\n\nCount the number of cars in each drive category.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors and Categorical Data with forcats</span>"
    ]
  },
  {
    "objectID": "factors.html#in-class-exercise-3-collapsing-levels",
    "href": "factors.html#in-class-exercise-3-collapsing-levels",
    "title": "\n11  Factors and Categorical Data with forcats\n",
    "section": "\n16.1 In-Class Exercise 3 – Collapsing Levels",
    "text": "16.1 In-Class Exercise 3 – Collapsing Levels\n\nCreate a new variable that collapses class into small vs. large.\n\nMake a bar chart of the collapsed variable.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors and Categorical Data with forcats</span>"
    ]
  },
  {
    "objectID": "factors.html#in-class-challenge-factor-workflow",
    "href": "factors.html#in-class-challenge-factor-workflow",
    "title": "\n11  Factors and Categorical Data with forcats\n",
    "section": "\n17.1 In-Class Challenge – Factor Workflow",
    "text": "17.1 In-Class Challenge – Factor Workflow\nUsing the mpg dataset:\n\nReorder the manufacturer variable by number of cars\nCollapse classes into fewer categories\nCreate a bar plot that uses the new ordering and grouping",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Factors and Categorical Data with forcats</span>"
    ]
  },
  {
    "objectID": "relational.html",
    "href": "relational.html",
    "title": "\n12  Relational Data with dplyr Joins\n",
    "section": "",
    "text": "12.1 Learning Objectives\nBy the end of this chapter, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Relational Data with dplyr Joins</span>"
    ]
  },
  {
    "objectID": "relational.html#learning-objectives",
    "href": "relational.html#learning-objectives",
    "title": "\n12  Relational Data with dplyr Joins\n",
    "section": "",
    "text": "Understand the concept of relational data and keys\nCombine multiple datasets using different join functions\nUse left_join(), inner_join(), full_join(), and semi_join()\n\nDiagnose and handle join problems (missing keys, duplicates)\nApply joins in analysis workflows",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Relational Data with dplyr Joins</span>"
    ]
  },
  {
    "objectID": "relational.html#in-class-exercise-1-basic-joins",
    "href": "relational.html#in-class-exercise-1-basic-joins",
    "title": "\n12  Relational Data with dplyr Joins\n",
    "section": "\n15.1 In-Class Exercise 1 – Basic Joins",
    "text": "15.1 In-Class Exercise 1 – Basic Joins\n\nUse left_join() to add airline names to flights (rename to airline_name).\n\nCount the number of flights for each airline.\n\nUse inner_join() and compare the number of rows.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Relational Data with dplyr Joins</span>"
    ]
  },
  {
    "objectID": "relational.html#in-class-exercise-2-multi-table-joins",
    "href": "relational.html#in-class-exercise-2-multi-table-joins",
    "title": "\n12  Relational Data with dplyr Joins\n",
    "section": "\n16.1 In-Class Exercise 2 – Multi-Table Joins",
    "text": "16.1 In-Class Exercise 2 – Multi-Table Joins\n\nJoin flights with airports to add destination airport names.\n\nSummarize average arrival delay by airport.\n\nWhich airport has the longest average delay?",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Relational Data with dplyr Joins</span>"
    ]
  },
  {
    "objectID": "relational.html#in-class-challenge-join-workflow",
    "href": "relational.html#in-class-challenge-join-workflow",
    "title": "\n12  Relational Data with dplyr Joins\n",
    "section": "\n17.1 In-Class Challenge – Join Workflow",
    "text": "17.1 In-Class Challenge – Join Workflow\n\nJoin flights with airlines and airports\n\nCalculate average arrival delay by airline and destination\n\nArrange by delay and identify the worst-performing routes",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Relational Data with dplyr Joins</span>"
    ]
  },
  {
    "objectID": "advanced_import.html",
    "href": "advanced_import.html",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "",
    "text": "13.1 Learning Objectives\nBy the end of this lecture, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "advanced_import.html#learning-objectives",
    "href": "advanced_import.html#learning-objectives",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "",
    "text": "Import and work with data from Excel and Google Sheets\nConnect to and query relational databases from R\nUse Arrow to work efficiently with parquet files and large datasets\nAccess and tidy hierarchical JSON data\nPerform basic web scraping to extract data from web pages",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "advanced_import.html#in-class-exercise-1-spreadsheets",
    "href": "advanced_import.html#in-class-exercise-1-spreadsheets",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "\n14.1 In-Class Exercise 1 – Spreadsheets",
    "text": "14.1 In-Class Exercise 1 – Spreadsheets\n\nRead an Excel file from the course data folder.\n\nLoad a Google Sheet you create (optional, requires authentication).\n\nSummarize one numeric column.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "advanced_import.html#in-class-exercise-2-databases",
    "href": "advanced_import.html#in-class-exercise-2-databases",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "\n15.1 In-Class Exercise 2 – Databases",
    "text": "15.1 In-Class Exercise 2 – Databases\n\nConnect to the provided SQLite database.\n\nList tables with dbListTables().\n\nQuery the flights table for flights delayed more than 2 hours.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "advanced_import.html#in-class-exercise-3-arrow",
    "href": "advanced_import.html#in-class-exercise-3-arrow",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "\n16.1 In-Class Exercise 3 – Arrow",
    "text": "16.1 In-Class Exercise 3 – Arrow\n\nOpen a parquet dataset using arrow::open_dataset().\n\nRun a filter and select query.\n\nCompare performance to reading the equivalent CSV.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "advanced_import.html#in-class-exercise-4-json-rectangling",
    "href": "advanced_import.html#in-class-exercise-4-json-rectangling",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "\n17.1 In-Class Exercise 4 – JSON Rectangling",
    "text": "17.1 In-Class Exercise 4 – JSON Rectangling\n\nLoad a nested JSON file.\n\nUse unnest_wider() or unnest_longer() to flatten it.\n\nCreate a tidy table with one row per observation.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "advanced_import.html#in-class-exercise-5-web-scraping",
    "href": "advanced_import.html#in-class-exercise-5-web-scraping",
    "title": "\n13  Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping\n",
    "section": "\n18.1 In-Class Exercise 5 – Web Scraping",
    "text": "18.1 In-Class Exercise 5 – Web Scraping\n\nUse rvest to scrape a simple table from Wikipedia.\n\nConvert it to a tibble and clean column names.\n\nCreate a plot of GDP vs. rank.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Accessing Data: Spreadsheets, Databases, Arrow, JSON, and Web Scraping</span>"
    ]
  },
  {
    "objectID": "codestyle.html",
    "href": "codestyle.html",
    "title": "Appendix A: Appendix: Coding Style Guidelines",
    "section": "",
    "text": "A.1 Why Style Matters\nConsistent code style makes your work:\nThis appendix summarizes the tidyverse style guide based on R4DS Workflow: Style.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Appendix: Coding Style Guidelines</span>"
    ]
  },
  {
    "objectID": "codestyle.html#why-style-matters",
    "href": "codestyle.html#why-style-matters",
    "title": "Appendix A: Appendix: Coding Style Guidelines",
    "section": "",
    "text": "Easier to read (for you and collaborators)\n\nEasier to debug (clean structure reveals problems quickly)\n\nEasier to maintain (future you will thank present you)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Appendix: Coding Style Guidelines</span>"
    ]
  },
  {
    "objectID": "codestyle.html#in-class-exercise",
    "href": "codestyle.html#in-class-exercise",
    "title": "Appendix A: Appendix: Coding Style Guidelines",
    "section": "\nI.1 In-Class Exercise",
    "text": "I.1 In-Class Exercise\n\nTake a messy R script (provided in class).\n\nReformat it to follow these style guidelines.\n\nCompare before vs. after readability.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Appendix: Coding Style Guidelines</span>"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "",
    "text": "C Course Overview\nINF506: Data Wrangling and Management introduces graduate students to data wrangling and management using R and the Tidyverse ecosystem. Students will learn to import, manipulate, clean, and visualize data with a strong emphasis on practical applications and reproducible workflows.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "syllabus.html#canvas-recorded-lectures",
    "href": "syllabus.html#canvas-recorded-lectures",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "C.1 Canvas & Recorded Lectures",
    "text": "C.1 Canvas & Recorded Lectures\nWe will use the learning management system, Canvas, to conduct some course business, including assignment disbursement and submitting. I will use Canvas to record lectures for future viewing.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "syllabus.html#cs506-book-website",
    "href": "syllabus.html#cs506-book-website",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "C.2 CS506 Book Website",
    "text": "C.2 CS506 Book Website\nI have compiled a course website that has supplemental text and coded examples that we will walk through in class. This website essentially serves as the course textbook and is required reading. There will be other required reading material.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "syllabus.html#course-student-learning-outcomes",
    "href": "syllabus.html#course-student-learning-outcomes",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "D.1 Course Student Learning Outcomes",
    "text": "D.1 Course Student Learning Outcomes\nLO1. Compare and contrast major classes of and techniques for data handling (synthesis).\n\nStudents will be able to:\n1. Identify various sources of data\n2. Identify and utilize tool chains appropriate for accessing data\n\nLO2. Design and enact data manipulation, analysis, and visualization workflows for large, heterogenous datasets (application).\nStudents will be able to:\n1. Aggregate data from multiple sources\n2. Reshape data for further analysis\n3. Validate data\n4. Generate meaningful statistics summarizing the data\n5. Visualize trends in data\n\nLO3. Reason about advantages, preferred use cases, and weaknesses of various data manipulation techniques (application)\nLO4. Develop a conceptual understanding of how the field of data management is evolving (knowledge).\n\nStudents will be able to:\n1. Find and employ data management tools in R\n2. Find and employ data visualization tools in R",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "syllabus.html#program-student-outcomes-supported-by-this-class",
    "href": "syllabus.html#program-student-outcomes-supported-by-this-class",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "D.2 Program Student Outcomes supported by this class",
    "text": "D.2 Program Student Outcomes supported by this class\nThis course directly supports the following program student outcomes in the Masters of Science in Computational and Applied Data Science program assessment and improvement plan:\nSO2. Build the practical skills to explore, analyze, manage, and visualize large data sets using the latest technologies.\nSO3. Evaluate and use well accepted methods to obtain, clean, pre-process, and transform data for further processing.\nSO4. Apply data science and cutting-edge analytical methods to address data-rich problems from a variety of fields, think critically about data, and drive decision making.\nSO7. Identify, appraise, and investigate ethical issues surrounding data collection, use, and data-driven decision making and to act in an informed and conscientious ethical manner.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "syllabus.html#course-policies",
    "href": "syllabus.html#course-policies",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "I.1 Course Policies",
    "text": "I.1 Course Policies\n\nStudents are encouraged to attend the office hours of the instructor. If a student cannot attend regular office hours with the instructor, an appointment may be considered if made via email with sufficient advanced notice.\nEmails addressed to the instructor must be respectful and professional. The instructor will respond to emails promptly, within 2 business days. The instructor will generally not respond to emails on weekends or after working hours (i.e., in the evenings), so please plan accordingly.\nCheating, including plagiarism of writing or computer code, will not be tolerated. All academic integrity violations are treated seriously. Academic integrity violations will result in penalties including, but not limited to, a zero on the assignment, a failing grade in the class, or expulsion from NAU. The University’s Academic Integrity policies will be strictly enforced. |\nEach student is required to demonstrate respect towards their peers and the instructor. The instructor is held to the same standard. - The instructor will not provide copies of course notes. These materials should be sought from the students’ peers or by watching the recorded lectures.\nElectronic device usage must support learning in the class. All cell phones, PDAs, music players and other entertainment devices must be turned off (or put on silent) during lecture.\nGrades will be entered in Canvas and . Please check LOUIE for your final grade.\nAttendance: Active participation in coding activities is expected. Repeated, unexcused absences may affect the student’s grade.\nCollaboration: Allowed for homeworks; problem sets and quizzes must be completed individually. - Late Work: Accepted only with prior arrangement.\nAcademic Integrity: Students must adhere to NAU’s academic integrity policy.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "syllabus.html#university-policies",
    "href": "syllabus.html#university-policies",
    "title": "Appendix B: CS506: Data Wrangling and Management– Syllabus",
    "section": "I.2 University Policies",
    "text": "I.2 University Policies\n\nPlease see this document for all of the required Syllabus Policy Statements that equally apply to this course.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>CS506: Data Wrangling and Management– Syllabus</span>"
    ]
  },
  {
    "objectID": "Rintro.html#homework-preview",
    "href": "Rintro.html#homework-preview",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "\n2.6 Homework Preview",
    "text": "2.6 Homework Preview\n\nCreate a .qmd document that:\n\nIncludes a title and your name\nDemonstrates at least three code chunks\nShows basic statistics on a numeric vector\nImports a dataset, inspects it with str() and summary(), and writes one paragraph summarizing your findings\n\n\nRender to PDF and submit to Canvas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "Rintro.html#next-steps",
    "href": "Rintro.html#next-steps",
    "title": "\n2  Introduction to R, RStudio, and Quarto\n",
    "section": "\n2.7 Next Steps",
    "text": "2.7 Next Steps\nYou now know how to run R scripts and render Quarto documents.\nNext week, you’ll learn how to create data visualizations using ggplot2.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R, RStudio, and Quarto</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#introduction",
    "href": "dplyr1.html#introduction",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n4.2 Introduction",
    "text": "4.2 Introduction\nThis chapter follows R for Data Science (Ch. 3) and introduces dplyr, a tidyverse package for data transformation.\nWe will use the nycflights13::flights dataset for examples.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#working-with-rows",
    "href": "dplyr1.html#working-with-rows",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n4.3 Working with Rows",
    "text": "4.3 Working with Rows\n\n4.3.1 filter()\n\nfilter() keeps rows that match given conditions.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)\n\nflights |&gt;\n  filter(month == 1, day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n4.3.2 arrange()\n\narrange() orders rows by a column.\n\nflights |&gt;\n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n4.3.3 In-Class Exercise 1 – Rows\nUsing the flights dataset:\n\nFilter for flights departing from JFK in July.\n\nArrange by arrival delay (largest to smallest).\n\nIdentify the flight with the worst delay.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#working-with-columns",
    "href": "dplyr1.html#working-with-columns",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n4.4 Working with Columns",
    "text": "4.4 Working with Columns\n\n4.4.1 select()\n\nselect() chooses columns.\n\nflights |&gt;\n  select(year, month, day, dep_delay, arr_delay)\n\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows\n\n\n\n4.4.2 mutate()\n\nmutate() creates or modifies columns.\n\nflights |&gt;\n  mutate(speed = distance / air_time * 60) |&gt;\n  select(tailnum, distance, air_time, speed)\n\n# A tibble: 336,776 × 4\n   tailnum distance air_time speed\n   &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 N14228      1400      227  370.\n 2 N24211      1416      227  374.\n 3 N619AA      1089      160  408.\n 4 N804JB      1576      183  517.\n 5 N668DN       762      116  394.\n 6 N39463       719      150  288.\n 7 N516JB      1065      158  404.\n 8 N829AS       229       53  259.\n 9 N593JB       944      140  405.\n10 N3ALAA       733      138  319.\n# ℹ 336,766 more rows\n\n\n\n4.4.3 In-Class Exercise 2 – Columns\n\nSelect carrier, flight, dep_delay, and arr_delay.\n\nCreate a column gain = arr_delay - dep_delay.\n\nDisplay the first 10 rows.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#using-pipes-to-combine-steps",
    "href": "dplyr1.html#using-pipes-to-combine-steps",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n4.5 Using Pipes to Combine Steps",
    "text": "4.5 Using Pipes to Combine Steps\nThe base R pipe |&gt; passes results from one function to the next, making code easier to read.\n\nflights |&gt;\n  filter(month == 6, origin == \"JFK\") |&gt;\n  select(carrier, flight, dep_delay, arr_delay) |&gt;\n  mutate(gain = arr_delay - dep_delay) |&gt;\n  arrange(desc(gain)) |&gt;\n  head()\n\n# A tibble: 6 × 5\n  carrier flight dep_delay arr_delay  gain\n  &lt;chr&gt;    &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 B6        2402        -2       142   144\n2 DL         706        -3       138   141\n3 AA         181        -2       132   134\n4 DL        1394       224       350   126\n5 B6          83        36       160   124\n6 DL         161       278       400   122\n\n\n\n\n4.5.1 In-Class Exercise 3 – Pipes\nChain these steps using |&gt;:\n\nFilter flights from JFK in June.\n\nSelect carrier, flight, dep_delay, arr_delay.\n\nCreate a column gain.\n\nArrange by largest gain and show the top 5.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#homework-preview",
    "href": "dplyr1.html#homework-preview",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n4.6 Homework Preview",
    "text": "4.6 Homework Preview\nFor Homework 2, you will:\n\nUse flights or another dataset.\n\nFilter for a subset of interest.\n\nCreate at least two new variables with mutate().\n\nSort using arrange().\n\nSave the transformed dataset and inspect it with glimpse() and summary().\n\nRender to PDF and submit on Canvas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr1.html#next-steps",
    "href": "dplyr1.html#next-steps",
    "title": "\n4  Data Transformation with dplyr (Part 1)\n",
    "section": "\n4.7 Next Steps",
    "text": "4.7 Next Steps\nNext week, we will extend these skills with group_by() and summarize() to calculate grouped summaries.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 1)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#grouped-summaries",
    "href": "dplyr2.html#grouped-summaries",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.2 Grouped Summaries",
    "text": "5.2 Grouped Summaries\nGrouping allows you to calculate statistics per group.\nWe will use the nycflights13::flights dataset.\n\n5.2.1 group_by() and summarize()\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 16 × 2\n   carrier delay\n   &lt;chr&gt;   &lt;dbl&gt;\n 1 9E      16.7 \n 2 AA       8.59\n 3 AS       5.80\n 4 B6      13.0 \n 5 DL       9.26\n 6 EV      20.0 \n 7 F9      20.2 \n 8 FL      18.7 \n 9 HA       4.90\n10 MQ      10.6 \n11 OO      12.6 \n12 UA      12.1 \n13 US       3.78\n14 VX      12.9 \n15 WN      17.7 \n16 YV      19.0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#grouping-with-multiple-variables",
    "href": "dplyr2.html#grouping-with-multiple-variables",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.4 Grouping with Multiple Variables",
    "text": "5.4 Grouping with Multiple Variables\nYou can group by multiple columns at once.\n\nflights |&gt;\n  group_by(origin, month) |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE),\n    .groups = \"drop_last\"\n  )\n\n# A tibble: 36 × 3\n# Groups:   origin [3]\n   origin month avg_delay\n   &lt;chr&gt;  &lt;int&gt;     &lt;dbl&gt;\n 1 EWR        1     14.9 \n 2 EWR        2     13.1 \n 3 EWR        3     18.1 \n 4 EWR        4     17.4 \n 5 EWR        5     15.4 \n 6 EWR        6     22.5 \n 7 EWR        7     22.0 \n 8 EWR        8     13.5 \n 9 EWR        9      7.29\n10 EWR       10      8.64\n# ℹ 26 more rows\n\n\n\n\n5.4.1 In-Class Exercise 2 – Multiple Grouping\n\nGroup by origin and carrier.\n\nSummarize with the average air_time.\n\nArrange results to see which origin-carrier combination has the longest average flights.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#joining-datasets",
    "href": "dplyr2.html#joining-datasets",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.5 Joining Datasets",
    "text": "5.5 Joining Datasets\ndplyr provides functions to join tables by a common key:\n\n\nleft_join()\n\n\ninner_join()\n\n\nright_join()\n\nfull_join()\n\nExample using flights and airlines:\n\nflights |&gt;\n  left_join(airlines, by = \"carrier\") |&gt;\n  select(name, carrier, flight) |&gt;\n  head()\n\n# A tibble: 6 × 3\n  name                   carrier flight\n  &lt;chr&gt;                  &lt;chr&gt;    &lt;int&gt;\n1 United Air Lines Inc.  UA        1545\n2 United Air Lines Inc.  UA        1714\n3 American Airlines Inc. AA        1141\n4 JetBlue Airways        B6         725\n5 Delta Air Lines Inc.   DL         461\n6 United Air Lines Inc.  UA        1696\n\n\n\n\n5.5.1 In-Class Exercise 3 – Joins\n\nUse left_join() to add airline names to the flights dataset.\n\nUse count() to find how many flights each airline operates.\n\nArrange results by the number of flights.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#chaining-with-pipes",
    "href": "dplyr2.html#chaining-with-pipes",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.6 Chaining with Pipes",
    "text": "5.6 Chaining with Pipes\nWe can combine group_by(), summarize(), and joins in a single pipeline.\n\nflights |&gt;\n  left_join(airlines, by = \"carrier\") |&gt;\n  group_by(name) |&gt;\n  summarize(\n    flights = n(),\n    avg_delay = mean(dep_delay, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(desc(avg_delay))\n\n# A tibble: 16 × 3\n   name                        flights avg_delay\n   &lt;chr&gt;                         &lt;int&gt;     &lt;dbl&gt;\n 1 Frontier Airlines Inc.          685     20.2 \n 2 ExpressJet Airlines Inc.      54173     20.0 \n 3 Mesa Airlines Inc.              601     19.0 \n 4 AirTran Airways Corporation    3260     18.7 \n 5 Southwest Airlines Co.        12275     17.7 \n 6 Endeavor Air Inc.             18460     16.7 \n 7 JetBlue Airways               54635     13.0 \n 8 Virgin America                 5162     12.9 \n 9 SkyWest Airlines Inc.            32     12.6 \n10 United Air Lines Inc.         58665     12.1 \n11 Envoy Air                     26397     10.6 \n12 Delta Air Lines Inc.          48110      9.26\n13 American Airlines Inc.        32729      8.59\n14 Alaska Airlines Inc.            714      5.80\n15 Hawaiian Airlines Inc.          342      4.90\n16 US Airways Inc.               20536      3.78",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#homework-preview",
    "href": "dplyr2.html#homework-preview",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.8 Homework Preview",
    "text": "5.8 Homework Preview\nFor Homework 2 (continued), extend your data transformation by:\n\nGrouping data by at least one variable\n\nCalculating at least two summary statistics\n\nJoining an additional dataset (e.g., airlines, airports)\n\nRendering your results as a table in your PDF",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#next-steps",
    "href": "dplyr2.html#next-steps",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.9 Next Steps",
    "text": "5.9 Next Steps\nNext week, we will explore tidy data principles and learn how to reshape datasets using tidyr.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  },
  {
    "objectID": "dplyr2.html#multiple-summaries",
    "href": "dplyr2.html#multiple-summaries",
    "title": "\n5  Data Transformation with dplyr (Part 2)\n",
    "section": "\n5.3 Multiple Summaries",
    "text": "5.3 Multiple Summaries\n\nflights |&gt;\n  group_by(dest) |&gt;\n  summarize(\n    count = n(),\n    avg_delay = mean(arr_delay, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# A tibble: 105 × 3\n   dest  count avg_delay\n   &lt;chr&gt; &lt;int&gt;     &lt;dbl&gt;\n 1 ABQ     254      4.38\n 2 ACK     265      4.85\n 3 ALB     439     14.4 \n 4 ANC       8     -2.5 \n 5 ATL   17215     11.3 \n 6 AUS    2439      6.02\n 7 AVL     275      8.00\n 8 BDL     443      7.05\n 9 BGR     375      8.03\n10 BHM     297     16.9 \n# ℹ 95 more rows\n\n\n\n\n5.3.1 In-Class Exercise 1 – Grouped Summaries\nUsing flights:\n\nGroup by origin and calculate the average departure delay.\n\nGroup by carrier and find the number of flights and average arrival delay.\n\nWhich carrier has the highest average arrival delay?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Transformation with dplyr (Part 2)</span>"
    ]
  }
]