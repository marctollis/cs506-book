---
title: "Relational Data with dplyr Joins"
---

## Learning Objectives

By the end of this chapter, you should be able to:

- Understand the concept of relational data and keys
- Combine multiple datasets using different join functions
- Use `left_join()`, `inner_join()`, `full_join()`, and `semi_join()`
- Diagnose and handle join problems (missing keys, duplicates)
- Apply joins in analysis workflows

---

# 1. What is Relational Data?

Relational data consists of **multiple tables** that can be linked by **keys**.

Example tables from `nycflights13`:

- `flights`: flight information
- `airlines`: airline names
- `airports`: airport locations
- `planes`: plane details
- `weather`: weather data

---

# 2. Keys

- **Primary key**: uniquely identifies each row in a table  
- **Foreign key**: column that matches a primary key in another table  

Example: `flights$carrier` matches `airlines$carrier`.

---

# 3. Joins with dplyr

`dplyr` join functions merge tables by keys.

### `left_join()`

Keeps all rows from the first table:

```{r}
library(tidyverse)
library(nycflights13)

flights |>
  left_join(airlines, by = "carrier") |>
  rename(airline_name = name) |>
  select(airline_name, carrier, flight) |>
  head()
```

---

### `inner_join()`

Keeps only matching rows:

```{r}
flights |>
  inner_join(airlines, by = "carrier") |>
  rename(airline_name = name) |>
  select(airline_name, carrier, flight) |>
  head()
```

---

### `full_join()`

Keeps all rows from both tables:

```{r}
flights |>
  full_join(airlines, by = "carrier") |>
  rename(airline_name = name) |>
  select(airline_name, carrier, flight) |>
  head()
```

---

### `semi_join()` and `anti_join()`

- `semi_join()`: keeps rows in first table with matches in second  
- `anti_join()`: keeps rows with no matches

```{r}
flights |>
  semi_join(airlines, by = "carrier") |>
  head()
```

---

## In-Class Exercise 1 – Basic Joins

1. Use `left_join()` to add airline names to `flights` (rename to `airline_name`).  
2. Count the number of flights for each airline.  
3. Use `inner_join()` and compare the number of rows.

---

# 4. Joining Multiple Tables

You can chain joins to combine several datasets:

```{r}
flights |>
  left_join(airlines, by = "carrier") |>
  rename(airline_name = name) |>
  left_join(airports, by = c("dest" = "faa")) |>
  select(airline_name, dest, arr_delay) |>
  head()
```

---

## In-Class Exercise 2 – Multi-Table Joins

1. Join `flights` with `airports` to add destination airport names.  
2. Summarize average arrival delay by airport.  
3. Which airport has the longest average delay?

---

# 5. Handling Join Problems

- Missing keys → results in `NA` values  
- Duplicated keys → may create duplicate rows  
- Always check results with `count()` or `distinct()`

Example:

```{r}
flights |>
  left_join(airlines, by = "carrier") |>
  rename(airline_name = name) |>
  count(carrier, airline_name)
```

---

## In-Class Challenge – Join Workflow

- Join flights with airlines and airports  
- Calculate average arrival delay by airline and destination  
- Arrange by delay and identify the worst-performing routes

---

# Homework Preview

For the next homework, you will:

- Combine at least two datasets using joins
- Use at least two different join types (`left_join()`, `inner_join()`, etc.)
- Handle missing data or duplicates appropriately
- Produce a summary table and one visualization based on the joined data
- Render to PDF and submit on Canvas

---

# Next Steps

Next, we will introduce **modeling basics** to begin connecting variables through simple models.
